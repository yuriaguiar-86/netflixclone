{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\_estudo\\\\React\\\\Netflix\\\\netflixclone\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb';\nimport Header from './components/Header';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [movieList, setMovieList] = useState([]);\n  const [featureData, setFeatureData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      // Captura a lsita total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); // Captura a feature\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeatureData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      black: blackHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), featureData && /*#__PURE__*/_jsxDEV(FeaturedMovie, {\n      item: featureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"lists\",\n      children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n        title: item.title,\n        items: item.items\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}, \"5LF4xwNnogduJd6oiXSPkEFnD+I=\");","map":{"version":3,"sources":["C:/wamp64/www/_estudo/React/Netflix/netflixclone/src/App.js"],"names":["React","useEffect","useState","Tmdb","Header","MovieRow","FeaturedMovie","movieList","setMovieList","featureData","setFeatureData","blackHeader","setBlackHeader","loadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","scrollListener","window","scrollY","addEventListener","removeEventListener","map","item","key","title"],"mappings":";;;AACA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,OAAO,WAAP;;AAEA,kBAAe,MAAM;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,OAAO,GAAG,YAAY;AACxB;AACA,UAAIC,IAAI,GAAG,MAAMX,IAAI,CAACY,WAAL,EAAjB;AACAP,MAAAA,YAAY,CAACM,IAAD,CAAZ,CAHwB,CAKxB;;AACA,UAAIE,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,WAA5B,CAAhB;AACA,UAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BC,MAA3B,GAAoC,CAArD,CAAX,CAAnB;AACA,UAAIC,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BL,YAA3B,CAAb;AACA,UAAIQ,UAAU,GAAG,MAAMzB,IAAI,CAAC0B,YAAL,CAAkBF,MAAM,CAACG,EAAzB,EAA6B,IAA7B,CAAvB;AAEApB,MAAAA,cAAc,CAACkB,UAAD,CAAd;AACH,KAZD;;AAcAf,IAAAA,OAAO;AACV,GAhBQ,EAgBN,EAhBM,CAAT;AAkBAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM8B,cAAc,GAAG,MAAM;AACzB,UAAGC,MAAM,CAACC,OAAP,GAAiB,EAApB,EAAuB;AACnBrB,QAAAA,cAAc,CAAC,IAAD,CAAd;AACH,OAFD,MAEK;AACDA,QAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ,KAND;;AAQAoB,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,cAAlC;AAEA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,cAArC;AACH,KAFD;AAGH,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEpB;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,EAGKF,WAAW,iBAAI,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,YAHpB,eAKI;AAAS,MAAA,SAAS,EAAC,OAAnB;AAAA,gBACKF,SAAS,CAAC6B,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACX,QAAC,QAAD;AAAoB,QAAA,KAAK,EAAED,IAAI,CAACE,KAAhC;AAAuC,QAAA,KAAK,EAAEF,IAAI,CAACb;AAAnD,SAAec,GAAf;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CApDD","sourcesContent":["\r\nimport React, {useEffect, useState} from 'react';\r\n\r\nimport Tmdb from './Tmdb';\r\nimport Header from './components/Header'\r\nimport MovieRow from './components/MovieRow';\r\nimport FeaturedMovie from './components/FeaturedMovie';\r\n\r\nimport './App.css';\r\n\r\nexport default () => {\r\n    const [movieList, setMovieList] = useState([]);\r\n    const [featureData, setFeatureData] = useState(null);\r\n    const [blackHeader, setBlackHeader] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const loadAll = async () => {\r\n            // Captura a lsita total\r\n            let list = await Tmdb.getHomeList();\r\n            setMovieList(list);\r\n\r\n            // Captura a feature\r\n            let originals = list.filter(i => i.slug === 'originals');\r\n            let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\r\n            let chosen = originals[0].items.results[randomChosen];\r\n            let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\r\n            \r\n            setFeatureData(chosenInfo);\r\n        }\r\n\r\n        loadAll();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const scrollListener = () => {\r\n            if(window.scrollY > 10){\r\n                setBlackHeader(true);\r\n            }else{\r\n                setBlackHeader(false);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('scroll', scrollListener);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', scrollListener);\r\n        }\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"page\">\r\n            <Header black={blackHeader} />\r\n            \r\n            {featureData && <FeaturedMovie item={featureData} />}\r\n\r\n            <section className=\"lists\">\r\n                {movieList.map((item, key) => (\r\n                    <MovieRow key={key} title={item.title} items={item.items} />\r\n                ))}\r\n            </section>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}